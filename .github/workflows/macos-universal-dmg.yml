name: Build macOS Universal DMG (unsigned, both arch)

on:
  workflow_dispatch:
  push:
    tags: ["v*"]

env:
  APP_NAME: "MyApp"                       # 変更可: アプリ名
  ENTRYPOINT: "main.py"                   # 変更可: エントリポイント
  BUNDLE_ID: "com.example.myapp"          # 変更可: バンドルID
  ICON_PATH: "assets/app.icns"            # 任意: 無ければ自動スキップ

jobs:
  # 1) Intel (x86_64) 版ビルド
  build-intel:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build .app (PyInstaller)
        run: |
          if [ -f mac.spec ]; then
            pyinstaller --noconfirm mac.spec
          else
            ICON_ARG=""
            if [ -f "$ICON_PATH" ]; then ICON_ARG="--icon $ICON_PATH"; fi
            pyinstaller --windowed --noconfirm \
              --name "${APP_NAME}" \
              --osx-bundle-identifier "${BUNDLE_ID}" \
              $ICON_ARG \
              --hidden-import DrissionPage \
              --hidden-import selenium \
              --hidden-import webdriver_manager \
              --hidden-import pandas \
              --hidden-import numpy \
              --hidden-import python-dateutil \
              --hidden-import pytz \
              "${ENTRYPOINT}"
          fi
          ls -la dist

      - name: Rename .app (Intel)
        run: |
          mv "dist/${APP_NAME}.app" "dist/${APP_NAME}-Intel.app"

      - name: Zip .app (Intel)
        run: |
          cd dist
          zip -qry "${APP_NAME}-Intel.app.zip" "${APP_NAME}-Intel.app"

      - uses: actions/upload-artifact@v4
        with:
          name: app-intel
          path: dist/${{ env.APP_NAME }}-Intel.app.zip

  # 2) Apple Silicon (arm64) 版ビルド
  build-arm:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install -U pip pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Build .app (PyInstaller)
        run: |
          if [ -f mac.spec ]; then
            pyinstaller --noconfirm mac.spec
          else
            ICON_ARG=""
            if [ -f "$ICON_PATH" ]; then ICON_ARG="--icon $ICON_PATH"; fi
            pyinstaller --windowed --noconfirm \
              --name "${APP_NAME}" \
              --osx-bundle-identifier "${BUNDLE_ID}" \
              $ICON_ARG \
              "${ENTRYPOINT}"
          fi
          ls -la dist

      - name: Rename .app (AppleSilicon)
        run: |
          mv "dist/${APP_NAME}.app" "dist/${APP_NAME}-AppleSilicon.app"

      - name: Zip .app (AppleSilicon)
        run: |
          cd dist
          zip -qry "${APP_NAME}-AppleSilicon.app.zip" "${APP_NAME}-AppleSilicon.app"

      - uses: actions/upload-artifact@v4
        with:
          name: app-arm
          path: dist/${{ env.APP_NAME }}-AppleSilicon.app.zip

  # 3) 両 .app を1つの DMG に梱包
  package-universal-dmg:
    runs-on: macos-14
    needs: [build-intel, build-arm]
    steps:
      - uses: actions/checkout@v4

      - name: Download Intel app zip
        uses: actions/download-artifact@v4
        with:
          name: app-intel
          path: bundle/intel

      - name: Download AppleSilicon app zip
        uses: actions/download-artifact@v4
        with:
          name: app-arm
          path: bundle/arm

      - name: Unzip apps & normalize
        env:
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          set -euxo pipefail
          ls -R bundle || true

          # 解凍
          unzip -q "bundle/intel/${APP_NAME}-Intel.app.zip" -d bundle
          unzip -q "bundle/arm/${APP_NAME}-AppleSilicon.app.zip" -d bundle

          # 結果確認
          test -d "bundle/${APP_NAME}-Intel.app"
          test -d "bundle/${APP_NAME}-AppleSilicon.app"
          echo "=== Tree after unzip ==="
          find bundle -maxdepth 2 -print

      - name: Prepare bundle contents (launcher & README)
        env:
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          set -euxo pipefail
          cd bundle

          # 起動ランチャー
          cat > "Start ${APP_NAME}.command" <<SH
          #!/bin/bash
          DIR="\$(cd "\$(dirname "\$0")" && pwd)"
          ARCH="\$(uname -m)"
          if [ "\$ARCH" = "arm64" ]; then
            open "\$DIR/${APP_NAME}-AppleSilicon.app"
          else
            open "\$DIR/${APP_NAME}-Intel.app"
          fi
          SH
          chmod +x "Start ${APP_NAME}.command"

          # README
          cat > "README.txt" <<TXT
          【${APP_NAME} の起動方法（署名・公証なし配布）】

          1) Apple シリコン: ${APP_NAME}-AppleSilicon.app
             Intel: ${APP_NAME}-Intel.app
             不明な場合は「Start ${APP_NAME}.command」を実行。

          2) 初回の Gatekeeper:
             - Finder で .app を右クリック→「開く」→「開く」
             - もしくは 設定 > プライバシーとセキュリティ > 「このまま開く」

          3) PyAutoGUI 等を使う場合は、設定 > プライバシーとセキュリティ で
             アクセシビリティ/画面収録の権限を付与してください。
          TXT
          cd ..

      - name: Install create-dmg
        run: |
          brew install create-dmg || true

      - name: Make Universal DMG
        env:
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          set -euxo pipefail
          mkdir -p dist
          OUT="dist/${APP_NAME}-Universal.dmg"

          echo "== create-dmg version =="
          create-dmg --version || true
          create-dmg --help | head -n 20 || true

          # 既存 DMG を削除（--overwrite は使わない）
          rm -f "$OUT"

          # 背景あり/なしで作成（失敗時は hdiutil にフォールバック）
          if [ -f "packaging/dmg-background.png" ]; then
            if ! create-dmg \
              --volname "${APP_NAME}" \
              --window-pos 200 120 --window-size 720 440 \
              --icon "${APP_NAME}-Intel.app" 140 170 \
              --icon "${APP_NAME}-AppleSilicon.app" 320 170 \
              --icon "Start ${APP_NAME}.command" 500 170 \
              --app-drop-link 600 170 \
              --background "packaging/dmg-background.png" \
              "$OUT" "bundle"
            then
              echo "create-dmg failed -> fallback to hdiutil (no layout)"
              hdiutil create -volname "${APP_NAME}" -srcfolder "bundle" -ov -format UDZO "$OUT"
            fi
          else
            if ! create-dmg \
              --volname "${APP_NAME}" \
              --window-pos 200 120 --window-size 720 440 \
              --icon "${APP_NAME}-Intel.app" 140 170 \
              --icon "${APP_NAME}-AppleSilicon.app" 320 170 \
              --icon "Start ${APP_NAME}.command" 500 170 \
              --app-drop-link 600 170 \
              "$OUT" "bundle"
            then
              echo "create-dmg failed -> fallback to hdiutil (no layout)"
              hdiutil create -volname "${APP_NAME}" -srcfolder "bundle" -ov -format UDZO "$OUT"
            fi
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Universal-DMG
          path: dist/${{ env.APP_NAME }}-Universal.dmg
